
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user document.
      // Authenticated users can read their own document.
      allow read: if isAdmin() || request.auth.uid == userId;

      // Authenticated users can create their own document.
      allow create: if request.auth.uid == userId;
      
      // Authenticated users can update their own document.
      allow update: if request.auth.uid == userId;

      // Only admins can delete user documents (for now, deny all deletes for safety).
      allow delete: if false;
    }

    // Rules for the 'likesReceived' collection
    match /likesReceived/{likeId} {
        // Any authenticated user can read likes (to check matches, etc.)
        allow read: if request.auth != null;

        // A user can only create a 'like' document where they are the sender ('likedBy')
        allow create: if request.auth != null && request.resource.data.likedBy == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.memberid;

        // A user can only delete a 'like' they created.
        allow delete: if request.auth != null && get(/databases/$(database)/documents/likesReceived/$(likeId)).data.likedBy == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.memberid;
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
