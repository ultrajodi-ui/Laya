rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins have full access to everything
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow any authenticated user to read profiles (for browsing, etc.)
      allow get, list: if request.auth != null;
      // A user can only create, update, or delete their own document
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Rules for likes
    match /likesReceived/{likeId} {
      // A user can create a "like"
      allow create: if request.auth != null;
      // Only the user who was liked or the user who gave the like can delete it
      // Note: This is complex and might be better handled by a Cloud Function for security.
      // For now, only the creator can delete.
      allow delete: if request.auth.uid == resource.data.likedBy;
    }

    // Rules for support queries
    match /supportQueries/{queryId} {
      // Any authenticated user can submit a query
      allow create: if request.auth != null;
    }
    
    // Admins can manage the 'deletedUsers' collection
    match /deletedUsers/{deletedUserId} {
        allow read, write: if isAdmin();
    }
  }
}
